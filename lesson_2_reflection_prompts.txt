What happens when you initialize a repository? Why do you need to do it?

    The data structure required by git itself is created in the .git folder.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

    The staging area is not a full collection of files, and is of a more
    tentative nature. The working directory is actual files, and the repository
    is actual commits.
    The value offered by the staging area is that it allows full control over
    the contents of a commit by allowing the files to be committed to be
    specified.

How can you use the staging area to make sure you have one commit per logical
change?

    You can include only those files relative to the one logical change you
    have made, and you can use "git diff --staged" to verify that the staged
    differences are all related to one logical change.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

    Perhaps there is more than one way to proceed with a problem, such as
    taking two different approaches, or even working on two different aspects.
    Branches would let me both name, and keep separate, the two types of
    changes.

How do the diagrams help you visualize the branch structure?

    They allow you to understand what is reachable from which branch, and
    how diverging branches work.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

    I'm not entirely sure how Git's automatic merging works. It is represented
    as two branches merging, since the changes since their common ancestor
    are both incorporated into the merge.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

    Automatic pros: convenience!
    Automatic cons: may include redundant functions
    Manual pro: no errors created by overly aggressive merging
    Manual cons: slow!